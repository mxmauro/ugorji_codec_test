//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package test2

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF87821 = 1
	codecSelferCcRAW7821  = 255
	// ----- value types used ----
	codecSelferValueTypeArray7821     = 10
	codecSelferValueTypeMap7821       = 9
	codecSelferValueTypeString7821    = 6
	codecSelferValueTypeInt7821       = 2
	codecSelferValueTypeUint7821      = 3
	codecSelferValueTypeFloat7821     = 4
	codecSelferValueTypeNil7821       = 1
	codecSelferBitsize7821            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil7821 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct7821 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer7821 struct{}

func codecSelfer7821False() bool { return false }
func codecSelfer7821True() bool  { return true }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
}

func (A) codecSelferViaCodecgen() {}
func (x *A) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7821
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [1]bool{     // should field at this index be written?
			x.Dummy1 != 0, // dummy1
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			if yyq2[0] {
				r.EncodeInt(int64(x.Dummy1))
			} else {
				r.EncodeInt(0)
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			if yyq2[0] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dummy1\"")
				} else {
					r.EncodeString(`dummy1`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.Dummy1))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *A) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7821
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7821 {
		*(x) = A{}
	} else if yyct2 == codecSelferValueTypeMap7821 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7821 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7821)
	}
}

func (x *A) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7821
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "dummy1":
			x.Dummy1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize7821))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *A) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7821
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Dummy1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize7821))
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}

func (x *A) IsCodecEmpty() bool {
	return !(x.Dummy1 != 0 || false)
}
